// Code generated by MockGen. DO NOT EDIT.
// Source: counter.go

// Package shorturl is a generated GoMock package.
package shorturl

import (
	context "context"
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCounterRepository is a mock of CounterRepository interface.
type MockCounterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCounterRepositoryMockRecorder
}

// MockCounterRepositoryMockRecorder is the mock recorder for MockCounterRepository.
type MockCounterRepositoryMockRecorder struct {
	mock *MockCounterRepository
}

// NewMockCounterRepository creates a new mock instance.
func NewMockCounterRepository(ctrl *gomock.Controller) *MockCounterRepository {
	mock := &MockCounterRepository{ctrl: ctrl}
	mock.recorder = &MockCounterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterRepository) EXPECT() *MockCounterRepositoryMockRecorder {
	return m.recorder
}

// NextPosition mocks base method.
func (m *MockCounterRepository) NextPosition(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPosition", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPosition indicates an expected call of NextPosition.
func (mr *MockCounterRepositoryMockRecorder) NextPosition(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPosition", reflect.TypeOf((*MockCounterRepository)(nil).NextPosition), ctx)
}

// MockWriteRepository is a mock of WriteRepository interface.
type MockWriteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWriteRepositoryMockRecorder
}

// MockWriteRepositoryMockRecorder is the mock recorder for MockWriteRepository.
type MockWriteRepositoryMockRecorder struct {
	mock *MockWriteRepository
}

// NewMockWriteRepository creates a new mock instance.
func NewMockWriteRepository(ctrl *gomock.Controller) *MockWriteRepository {
	mock := &MockWriteRepository{ctrl: ctrl}
	mock.recorder = &MockWriteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriteRepository) EXPECT() *MockWriteRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriteRepository) Create(ctx context.Context, url *url.URL, alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, url, alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWriteRepositoryMockRecorder) Create(ctx, url, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriteRepository)(nil).Create), ctx, url, alias)
}

// MockReadRepository is a mock of ReadRepository interface.
type MockReadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReadRepositoryMockRecorder
}

// MockReadRepositoryMockRecorder is the mock recorder for MockReadRepository.
type MockReadRepositoryMockRecorder struct {
	mock *MockReadRepository
}

// NewMockReadRepository creates a new mock instance.
func NewMockReadRepository(ctrl *gomock.Controller) *MockReadRepository {
	mock := &MockReadRepository{ctrl: ctrl}
	mock.recorder = &MockReadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadRepository) EXPECT() *MockReadRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockReadRepository) Find(ctx context.Context, alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockReadRepositoryMockRecorder) Find(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockReadRepository)(nil).Find), ctx, alias)
}
